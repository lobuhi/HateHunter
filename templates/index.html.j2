<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HateHunter Dashboard</title>
    <link rel="stylesheet" href="/static/css/main.css">
    <style>
        /* Modal Styles for Create Project */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(3px);
        }

        .modal-content {
            background-color: var(--white);
            margin: 5% auto;
            padding: 0;
            border-radius: 12px;
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: var(--shadow-xl);
            border: 1px solid var(--gray-200);
        }

        .modal-header {
            background: linear-gradient(135deg, var(--primary-blue) 0%, var(--secondary-blue) 100%);
            color: var(--white);
            padding: 24px;
            border-radius: 12px 12px 0 0;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .modal-header h2 {
            margin: 0;
            font-size: 24px;
            font-weight: 700;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .modal-header p {
            margin: 8px 0 0 0;
            opacity: 0.9;
            font-size: 14px;
        }

        .close {
            position: absolute;
            right: 20px;
            top: 20px;
            color: var(--white);
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: background-color 0.2s;
        }

        .close:hover {
            background-color: rgba(255, 255, 255, 0.2);
        }

        .modal-body {
            padding: 24px;
        }

        .form-section {
            margin-bottom: 24px;
            padding: 20px;
            background-color: var(--gray-50);
            border-radius: 8px;
            border: 1px solid var(--gray-200);
        }

        .form-section h3 {
            margin: 0 0 16px 0;
            color: var(--primary-blue);
            font-size: 18px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .form-group {
            margin-bottom: 16px;
        }

        .form-group:last-child {
            margin-bottom: 0;
        }

        .form-group label {
            display: block;
            margin-bottom: 6px;
            font-weight: 500;
            color: var(--gray-700);
            font-size: 14px;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 10px 12px;
            border: 2px solid var(--gray-300);
            border-radius: 6px;
            font-size: 14px;
            transition: border-color 0.2s ease;
            background-color: var(--white);
        }

        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: var(--secondary-blue);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .form-group textarea {
            resize: vertical;
            min-height: 80px;
        }

        .form-group small {
            display: block;
            margin-top: 4px;
            color: var(--gray-500);
            font-size: 12px;
        }

        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 12px;
        }

        .checkbox-group input[type="checkbox"] {
            width: auto;
            margin: 0;
        }

        .checkbox-group label {
            margin: 0;
            font-size: 14px;
            cursor: pointer;
        }

        .modal-footer {
            padding: 20px 24px;
            border-top: 1px solid var(--gray-200);
            display: flex;
            gap: 12px;
            justify-content: flex-end;
            background-color: var(--gray-50);
            border-radius: 0 0 12px 12px;
        }

        .btn-primary {
            background-color: var(--secondary-blue);
            color: var(--white);
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary:hover {
            background-color: var(--primary-blue);
            transform: translateY(-1px);
            box-shadow: var(--shadow-md);
        }

        .btn-primary:disabled {
            background-color: var(--gray-400);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .btn-secondary {
            background-color: var(--white);
            color: var(--gray-700);
            border: 2px solid var(--gray-300);
            padding: 10px 24px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .btn-secondary:hover {
            border-color: var(--gray-400);
            background-color: var(--gray-50);
        }

        .create-project-btn {
            background-color: var(--success);
            color: var(--white);
            border: none;
            padding: 12px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 20px;
        }

        .create-project-btn:hover {
            background-color: #059669;
            transform: translateY(-1px);
            box-shadow: var(--shadow-md);
        }

        @media (max-width: 768px) {
            .modal-content {
                width: 95%;
                margin: 2% auto;
            }

            .modal-header,
            .modal-body {
                padding: 16px;
            }
        }
    </style>
</head>
<body>
    <!-- WebSocket Status -->
    <div class="ws-status">
        <div class="ws-indicator"></div>
        <span class="ws-status-text">Connecting...</span>
    </div>

    <header>
        <div class="dashboard-container">
            <h1>🎯 HateHunter Dashboard</h1>
            <div class="stats-bar">
                <div class="stat-item">
                    <span class="stat-number" id="totalProjects">0</span>
                    <span class="stat-label">Projects</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number" id="totalSubtitles">0</span>
                    <span class="stat-label">Flagged Subtitles</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number" id="totalComments">0</span>
                    <span class="stat-label">Flagged Comments</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number" id="totalCategories">0</span>
                    <span class="stat-label">Categories</span>
                </div>
            </div>
        </div>
    </header>

    <div class="dashboard-container">
        <div id="error-container"></div>
        
        <div id="loading" class="loading">
            <p>Loading projects...</p>
        </div>

        <div id="dashboard-content" style="display: none;">
            <!-- Create Project Button -->
            <button id="createProjectBtn" class="create-project-btn">
                ➕ Create New Project
            </button>

            <div class="filters">
                <div class="filter-group">
                    <label for="search">Search:</label>
                    <input type="text" id="search" placeholder="Search projects..." onkeyup="filterTable()">
                    <label for="categoryFilter">Category:</label>
                    <select id="categoryFilter" onchange="filterTable()">
                        <option value="">All Categories</option>
                    </select>
                </div>
            </div>

            <div class="projects-table">
                <table id="projectsTable">
                    <thead>
                        <tr>
                            <th onclick="sortTable(0)" style="cursor: pointer;">Project ↕</th>
                            <th onclick="sortTable(1)" style="cursor: pointer;">Date ↕</th>
                            <th>Counts</th>
                            <th>Categories</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="projectsTableBody">
                    </tbody>
                </table>
            </div>
        </div>

        <div id="empty-state" class="empty-state" style="display: none;">
            <h3>No projects found</h3>
            <p>Create your first project to start analyzing YouTube videos for hate content.</p>
            <button id="createProjectBtnEmpty" class="create-project-btn" style="margin-top: 20px;">
                ➕ Create Your First Project
            </button>
        </div>
    </div>

    <!-- Create Project Modal -->
    <div id="createProjectModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <span class="close">&times;</span>
                <h2>🎯 Create New HateHunter Project</h2>
                <p>Set up a new project to analyze YouTube videos for hate content</p>
            </div>
            
            <div class="modal-body">
                <form id="createProjectForm">
                    <!-- Project Information -->
                    <div class="form-section">
                        <h3>📁 Project Information</h3>
                        
                        <div class="form-group">
                            <label for="projectName">Project Name *</label>
                            <input type="text" id="projectName" placeholder="Enter project name" required>
                            <small>Choose a descriptive name for your project (e.g., "news-channel-analysis", "political-videos-2024")</small>
                        </div>

                        <div class="form-group">
                            <label for="projectDescription">Description (Optional)</label>
                            <textarea id="projectDescription" placeholder="Describe what this project will analyze..."></textarea>
                            <small>Brief description of the project's purpose and scope</small>
                        </div>
                    </div>

                    <!-- Info Section -->
                    <div class="form-section">
                        <h3>📹 Next Steps</h3>
                        <p style="margin: 0; color: var(--gray-600); line-height: 1.5;">
                            After creating the project, you'll be redirected to the project page where you can:
                        </p>
                        <ul style="margin: 12px 0 0 20px; color: var(--gray-600); line-height: 1.6;">
                            <li>Add individual YouTube videos for analysis</li>
                            <li>Add entire YouTube channels</li>
                            <li>Configure analysis settings (subtitles, comments, keywords)</li>
                            <li>Start the HateHunter analysis process</li>
                        </ul>
                    </div>
                </form>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn-secondary" id="cancelCreateBtn">Cancel</button>
                <button type="button" class="btn-primary" id="createProjectSubmitBtn">
                    📁 Create Empty Project
                </button>
            </div>
        </div>
    </div>

    <!-- Active Users -->
    <div class="active-users">
        <h3>Active Users (<span class="active-users-count">0</span>)</h3>
        <div class="user-list"></div>
    </div>

    <div class="footer">
        <p>Generated on <span id="timestamp"></span> | HateHunter v1.0</p>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.0/socket.io.js"></script>
    <script>
        let socket;
        let allProjects = [];
        let allCategories = new Set();
        let dataLoaded = false;
        
        // Modal variable
        let createModal;
        
        // Initialize the application
        function init() {
            console.log('🔍 DEBUG: Initializing HateHunter Dashboard...');
            
            document.getElementById('timestamp').textContent = new Date().toLocaleString();
            
            // Initialize modal
            initCreateProjectModal();
            
            // Try WebSocket first, fallback to REST API
            initWebSocket();
            
            // Also try REST API as fallback
            setTimeout(() => {
                if (!dataLoaded) {
                    console.log('🔍 DEBUG: WebSocket timeout, trying API fallback...');
                    loadProjectsViaAPI();
                }
            }, 3000);
        }

        function initCreateProjectModal() {
            createModal = document.getElementById('createProjectModal');
            const span = document.querySelector('#createProjectModal .close');
            const cancelBtn = document.getElementById('cancelCreateBtn');
            const submitBtn = document.getElementById('createProjectSubmitBtn');
            const createBtn = document.getElementById('createProjectBtn');
            const createBtnEmpty = document.getElementById('createProjectBtnEmpty');

            // Modal controls
            span.onclick = closeCreateModal;
            cancelBtn.onclick = closeCreateModal;
            submitBtn.onclick = submitCreateProject;
            createBtn.onclick = openCreateModal;
            createBtnEmpty.onclick = openCreateModal;

            // Close modal when clicking outside
            window.onclick = function(event) {
                if (event.target == createModal) {
                    closeCreateModal();
                }
            }

            // Project name validation
            document.getElementById('projectName').addEventListener('input', validateProjectName);
        }

        function openCreateModal() {
            createModal.style.display = 'block';
            resetCreateForm();
        }

        function closeCreateModal() {
            createModal.style.display = 'none';
            resetCreateForm();
        }

        function resetCreateForm() {
            document.getElementById('createProjectForm').reset();
            clearValidationMessages();
        }

        function validateProjectName() {
            const input = document.getElementById('projectName');
            const name = input.value.trim();
            
            if (!name) {
                return false;
            }

            // Check for invalid characters
            const invalidChars = /[<>:"/\\|?*\s]/;
            if (invalidChars.test(name)) {
                showFieldError('projectName', 'Project name cannot contain spaces or special characters: < > : " / \\ | ? *');
                return false;
            }

            // Check if project already exists
            if (allProjects.some(p => p.name.toLowerCase() === name.toLowerCase())) {
                showFieldError('projectName', 'A project with this name already exists');
                return false;
            }

            clearFieldError('projectName');
            return true;
        }

        function showFieldError(fieldId, message) {
            const field = document.getElementById(fieldId);
            
            // Remove existing error
            clearFieldError(fieldId);
            
            // Add error styling
            field.style.borderColor = 'var(--error)';
            
            // Add error message
            const errorDiv = document.createElement('div');
            errorDiv.className = 'field-error';
            errorDiv.style.cssText = 'color: var(--error); font-size: 12px; margin-top: 4px;';
            errorDiv.textContent = message;
            
            field.parentNode.appendChild(errorDiv);
        }

        function clearFieldError(fieldId) {
            const field = document.getElementById(fieldId);
            field.style.borderColor = '';
            
            const existingError = field.parentNode.querySelector('.field-error');
            if (existingError) {
                existingError.remove();
            }
        }

        function clearValidationMessages() {
            document.querySelectorAll('.field-error').forEach(error => error.remove());
            document.querySelectorAll('#createProjectForm input, #createProjectForm select, #createProjectForm textarea').forEach(field => {
                field.style.borderColor = '';
            });
        }

        async function submitCreateProject() {
            // Clear previous validation messages
            clearValidationMessages();

            const projectName = document.getElementById('projectName').value.trim();
            if (!projectName) {
                showFieldError('projectName', 'Project name is required');
                return;
            }

            if (!validateProjectName()) {
                return;
            }

            const projectDescription = document.getElementById('projectDescription').value.trim();

            try {
                // Disable submit button
                const submitBtn = document.getElementById('createProjectSubmitBtn');
                submitBtn.disabled = true;
                submitBtn.textContent = '⏳ Creating...';

                // Create empty project via API
                const response = await fetch('/api/projects', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        name: projectName,
                        description: projectDescription
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || `HTTP ${response.status}`);
                }

                const result = await response.json();
                
                closeCreateModal();
                showTemporaryMessage(`Project "${projectName}" created successfully!`, 3000);
                
                // Refresh projects list
                dataLoaded = false;
                loadProjectsViaAPI();
                
                // Redirect to project page after a short delay
                setTimeout(() => {
                    window.location.href = `/project/${projectName}/videos`;
                }, 1500);

            } catch (error) {
                console.error('Error creating project:', error);
                showTemporaryMessage(`Error creating project: ${error.message}`, 5000);
                
                // Re-enable submit button
                const submitBtn = document.getElementById('createProjectSubmitBtn');
                submitBtn.disabled = false;
                submitBtn.textContent = '📁 Create Empty Project';
            }
        }
        
        function initWebSocket() {
            try {
                socket = io();
                
                socket.on('connect', function() {
                    const indicator = document.querySelector('.ws-indicator');
                    const statusText = document.querySelector('.ws-status-text');
                    indicator.classList.add('connected');
                    statusText.textContent = 'Connected';
                    
                    socket.emit('request_refresh', {});
                });
                
                socket.on('disconnect', function() {
                    const indicator = document.querySelector('.ws-indicator');
                    const statusText = document.querySelector('.ws-status-text');
                    indicator.classList.remove('connected');
                    statusText.textContent = 'Disconnected';
                });
                
                socket.on('initial_data', function(data) {
                    if (!dataLoaded) {
                        dataLoaded = true;
                        displayProjects(data.projects || []);
                    }
                });
                
                socket.on('project_deleted', function(data) {
                    allProjects = allProjects.filter(p => p.name !== data.project_name);
                    renderProjectsTable(allProjects);
                    updateStats(allProjects);
                    updateCategoryFilter(allProjects);
                    showTemporaryMessage(`Project ${data.project_name} removed successfully`);
                });
                
                socket.on('user_count_update', function(data) {
                    const activeUsersCount = document.querySelector('.active-users-count');
                    activeUsersCount.textContent = data.count || 0;
                });
                
                socket.on('connect_error', function(error) {
                    console.error('WebSocket connection error:', error);
                    loadProjectsViaAPI();
                });
                
            } catch (error) {
                console.error('WebSocket initialization failed:', error);
                loadProjectsViaAPI();
            }
        }
        
        function loadProjectsViaAPI() {
            if (dataLoaded) {
                return;
            }
            
            fetch('/api/projects')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (!dataLoaded) {
                        dataLoaded = true;
                        displayProjects(data.projects || []);
                    }
                })
                .catch(error => {
                    console.error('API request failed:', error);
                    if (!dataLoaded) {
                        showError(`Failed to load projects: ${error.message}`);
                    }
                });
        }
        
        function displayProjects(projects) {
            allProjects = projects;
            
            const loading = document.getElementById('loading');
            const content = document.getElementById('dashboard-content');
            const emptyState = document.getElementById('empty-state');
            
            loading.style.display = 'none';
            
            if (!projects || projects.length === 0) {
                emptyState.style.display = 'block';
                content.style.display = 'none';
                return;
            }
            
            content.style.display = 'block';
            emptyState.style.display = 'none';
            
            updateStats(projects);
            updateCategoryFilter(projects);
            renderProjectsTable(projects);
            clearError();
        }
        
        function updateStats(projects) {
            const totalProjects = projects.length;
            const totalSubtitles = projects.reduce((sum, p) => sum + (p.subtitles_count || 0), 0);
            const totalComments = projects.reduce((sum, p) => sum + (p.comments_count || 0), 0);
            
            allCategories.clear();
            projects.forEach(project => {
                if (project.categories) {
                    project.categories.forEach(cat => allCategories.add(cat));
                }
            });
            
            document.getElementById('totalProjects').textContent = totalProjects;
            document.getElementById('totalSubtitles').textContent = totalSubtitles;
            document.getElementById('totalComments').textContent = totalComments;
            document.getElementById('totalCategories').textContent = allCategories.size;
        }
        
        function updateCategoryFilter(projects) {
            const select = document.getElementById('categoryFilter');
            select.innerHTML = '<option value="">All Categories</option>';
            
            Array.from(allCategories).sort().forEach(category => {
                const option = document.createElement('option');
                option.value = category;
                option.textContent = category;
                select.appendChild(option);
            });
        }
        
        function renderProjectsTable(projects) {
            const tbody = document.getElementById('projectsTableBody');
            tbody.innerHTML = '';
            
            projects.forEach(project => {
                const row = createProjectRow(project);
                tbody.appendChild(row);
            });
        }
        
        function createProjectRow(project) {
            const row = document.createElement('tr');
            row.setAttribute('data-project-name', project.name);
            
            // Project name and date
            const nameCell = document.createElement('td');
            nameCell.innerHTML = `
                <a href="/project/${project.name}/videos" class="project-name">${project.name}</a>
                <div class="project-date">${project.date || 'Unknown date'}</div>
            `;
            
            // Date (for sorting)
            const dateCell = document.createElement('td');
            dateCell.textContent = project.date || 'Unknown date';
            
            // Counts
            const countsCell = document.createElement('td');
            let countsHtml = '';
            if (project.videos_count > 0) {
                countsHtml += `<span class="count-badge videos">${project.videos_count} videos</span>`;
            }
            if (project.subtitles_count > 0) {
                countsHtml += `<span class="count-badge subtitles">${project.subtitles_count} subtitles</span>`;
            }
            if (project.comments_count > 0) {
                countsHtml += `<span class="count-badge comments">${project.comments_count} comments</span>`;
            }
            countsCell.innerHTML = countsHtml;
            
            // Categories
            const categoriesCell = document.createElement('td');
            if (project.categories && project.categories.length > 0) {
                const categoriesToShow = project.categories.slice(0, 5);
                let categoriesHtml = categoriesToShow.map(cat => {
                    let className = '';
                    if (cat.toLowerCase().includes('hate')) className = 'hate';
                    else if (cat.toLowerCase().includes('harassment')) className = 'harassment';
                    else if (cat.toLowerCase().includes('violence')) className = 'violence';
                    
                    return `<span class="category-tag ${className}">${cat}</span>`;
                }).join('');
                
                if (project.categories.length > 5) {
                    categoriesHtml += `<span class="category-tag">+${project.categories.length - 5} more</span>`;
                }
                categoriesCell.innerHTML = categoriesHtml;
            }
            
            // Actions
            const actionsCell = document.createElement('td');
            actionsCell.innerHTML = `
                <div class="action-links">
                    ${project.videos_count > 0 ? 
                        `<a href="/project/${project.name}/videos" class="action-link videos">Videos</a>` :
                        `<span class="action-link videos disabled">Videos</span>`
                    }
                    ${project.subtitles_count > 0 ? 
                        `<a href="/project/${project.name}/subtitles" class="action-link subtitles">Subtitles</a>` :
                        `<span class="action-link subtitles disabled">Subtitles</span>`
                    }
                    ${project.comments_count > 0 ? 
                        `<a href="/project/${project.name}/comments" class="action-link comments">Comments</a>` :
                        `<span class="action-link comments disabled">Comments</span>`
                    }
                    <a href="#" class="action-link report" onclick="generateReport('${project.name}'); return false;">📄 Report</a>
                    <button class="flag-badge remove-flag" 
                            onclick="removeProject('${project.name}')" 
                            title="Remove project and all its data">
                        🗑️ Remove
                    </button>
                </div>
            `;
            
            row.appendChild(nameCell);
            row.appendChild(dateCell);
            row.appendChild(countsCell);
            row.appendChild(categoriesCell);
            row.appendChild(actionsCell);
            
            return row;
        }
        
        function removeProject(projectName) {
            if (!confirm(`Are you sure you want to remove project "${projectName}"?\n\nThis will permanently delete all project data.\n\nThis action cannot be undone.`)) {
                return;
            }
            
            const projectRow = document.querySelector(`[data-project-name="${projectName}"]`);
            if (projectRow) {
                projectRow.style.opacity = '0.5';
                projectRow.style.pointerEvents = 'none';
            }
            
            fetch(`/api/project/${projectName}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                allProjects = allProjects.filter(p => p.name !== projectName);
                renderProjectsTable(allProjects);
                updateStats(allProjects);
                updateCategoryFilter(allProjects);
                showTemporaryMessage(`Project "${projectName}" removed successfully`);
                
                if (allProjects.length === 0) {
                    document.getElementById('dashboard-content').style.display = 'none';
                    document.getElementById('empty-state').style.display = 'block';
                }
            })
            .catch(error => {
                console.error('Error removing project:', error);
                
                if (projectRow) {
                    projectRow.style.opacity = '1';
                    projectRow.style.pointerEvents = 'auto';
                }
                
                showError(`Failed to remove project: ${error.message}`);
            });
        }
        
        function generateReport(projectName) {
            // Show loading state
            const reportLinks = document.querySelectorAll(`[onclick="generateReport('${projectName}'); return false;"]`);
            reportLinks.forEach(link => {
                link.textContent = '⏳ Generating...';
                link.style.pointerEvents = 'none';
            });
            
            // Request report generation
            fetch(`/api/project/${projectName}/report`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    if (response.status === 404) {
                        throw new Error('No reported items found for this project. Please mark some subtitles or comments as reported first.');
                    }
                    throw new Error(`Failed to generate report: ${response.status} ${response.statusText}`);
                }
                return response.blob();
            })
            .then(blob => {
                // Create download link
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = `${projectName}_report.html`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
                
                showTemporaryMessage(`Report generated successfully for project "${projectName}"!`, 4000);
            })
            .catch(error => {
                console.error('Error generating report:', error);
                showTemporaryMessage(`Error: ${error.message}`, 6000);
            })
            .finally(() => {
                // Restore button state
                reportLinks.forEach(link => {
                    link.textContent = '📄 Report';
                    link.style.pointerEvents = 'auto';
                });
            });
        }
        
        function showTemporaryMessage(message, duration = 3000) {
            const messageDiv = document.createElement('div');
            messageDiv.className = 'temporary-message';
            messageDiv.textContent = message;
            messageDiv.style.cssText = `
                position: fixed;
                top: 20px;
                left: 50%;
                transform: translateX(-50%);
                background-color: var(--success);
                color: white;
                padding: 12px 24px;
                border-radius: 6px;
                box-shadow: var(--shadow-lg);
                z-index: 1001;
                font-weight: 500;
            `;
            
            document.body.appendChild(messageDiv);
            
            setTimeout(() => {
                messageDiv.remove();
            }, duration);
        }
        
        function filterTable() {
            const searchInput = document.getElementById('search').value.toLowerCase();
            const categoryFilter = document.getElementById('categoryFilter').value.toLowerCase();
            const table = document.getElementById('projectsTable');
            const rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');
            
            for (let row of rows) {
                const projectName = row.cells[0].textContent.toLowerCase();
                const categories = row.cells[3].textContent.toLowerCase();
                
                const matchesSearch = projectName.includes(searchInput);
                const matchesCategory = !categoryFilter || categories.includes(categoryFilter);
                
                row.style.display = matchesSearch && matchesCategory ? '' : 'none';
            }
        }
        
        let sortDirection = {};
        
        function sortTable(columnIndex) {
            const table = document.getElementById('projectsTable');
            const tbody = table.getElementsByTagName('tbody')[0];
            const rows = Array.from(tbody.getElementsByTagName('tr'));
            
            // Toggle sort direction
            sortDirection[columnIndex] = !sortDirection[columnIndex];
            
            rows.sort((a, b) => {
                let aValue = a.cells[columnIndex].textContent.trim();
                let bValue = b.cells[columnIndex].textContent.trim();
                
                // Handle date sorting
                if (columnIndex === 1) {
                    aValue = new Date(aValue);
                    bValue = new Date(bValue);
                }
                
                if (aValue < bValue) return sortDirection[columnIndex] ? -1 : 1;
                if (aValue > bValue) return sortDirection[columnIndex] ? 1 : -1;
                return 0;
            });
            
            // Re-append sorted rows
            rows.forEach(row => tbody.appendChild(row));
        }
        
        function showError(message) {
            const container = document.getElementById('error-container');
            container.innerHTML = `<div class="error">${message}</div>`;
        }
        
        function clearError() {
            const container = document.getElementById('error-container');
            container.innerHTML = '';
        }
        
        // Initialize immediately when script loads
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', init);
        } else {
            init();
        }
    </script>
</body>
</html>